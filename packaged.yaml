AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'sam-app

  Sample SAM Template for sam-app

  '
Globals:
  Function:
    Timeout: 3
Resources:
  SocketLoggingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/fbeaa1b3e010628c9977a281033ca4de
      Handler: build/loggingLambda.handler
      Runtime: nodejs10.x
      Policies:
      - AWSLambdaFullAccess
      - CloudWatchLogsFullAccess
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - ConnectionsTable
              - StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/f527a8ae5673127ea305743d648d6e72
      Handler: build/notificationLambda.handler
      Runtime: nodejs10.x
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - arn:aws:execute-api:*:*:**/@connections/*
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      Tags:
      - Key: useage
        Value: trivia
  MyWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      RouteKey: $connect
      OperationName: ConnectRoute
      AuthorizationType: NONE
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: TestLambdaIntegration
  ConnectRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      RouteId:
        Ref: ConnectRoute
      ApiId:
        Ref: MyWebSocketApi
      RouteResponseKey: $default
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      RouteKey: $disconnect
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: TestLambdaIntegration
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: TestLambdaIntegration
  DefaultRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      RouteId:
        Ref: DefaultRoute
      ApiId:
        Ref: MyWebSocketApi
      RouteResponseKey: $default
  TestLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      Description: Test Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketLoggingFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - DefaultRoute
    Properties:
      ApiId:
        Ref: MyWebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: v1
      Description: Version 1 'stage'
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: MyWebSocketApi
  PortfolioBlocksPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - MyWebSocketApi
    - SocketLoggingFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SocketLoggingFunction
      Principal: apigateway.amazonaws.com
Outputs:
  SocketLoggingFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
      - SocketLoggingFunction
      - Arn
  SocketLoggingFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - SocketLoggingFunctionRole
      - Arn
  NotificationFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
      - NotificationFunction
      - Arn
  NotificationFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - NotificationFunctionRole
      - Arn
