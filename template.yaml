AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  SocketLoggingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambdas/
      Handler: build/loggingLambda.handler
      Runtime: nodejs10.x
      Policies:
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ConnectionsTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
  NotificationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambdas/
      Handler: build/notificationLambda.handler
      Runtime: nodejs10.x
      Policies: 
        - AWSLambdaExecute # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - "arn:aws:execute-api:*:*:**/@connections/*"
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
      - 
        AttributeName: "kid"
        AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - 
          AttributeName: kid
          KeyType: HASH
      StreamSpecification:  
        StreamViewType: NEW_IMAGE
      Tags: 
        - 
          Key: "useage"
          Value: "trivia"
  MyWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Name: MyWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "$connect"
      OperationName: ConnectRoute
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref TestLambdaIntegration
  # ConnectRouteResponse: # TODO: not working
  #   Type: 'AWS::ApiGatewayV2::RouteResponse'
  #   Properties:
  #     RouteId: !Ref ConnectRoute
  #     ApiId: !Ref MyWebSocketApi
  #     RouteResponseKey: $default        
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "$disconnect"
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref TestLambdaIntegration
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "$default"
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref TestLambdaIntegration
  # DefaultRouteResponse: # TODO> not working
  #   Type: 'AWS::ApiGatewayV2::RouteResponse'
  #   Properties:
  #     RouteId: !Ref DefaultRoute
  #     ApiId: !Ref MyWebSocketApi
  #     RouteResponseKey: $default
  TestLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: Test Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketLoggingFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - DefaultRoute
    Properties:
      ApiId: !Ref MyWebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: v1
      Description: Version 1 'stage'
      DeploymentId: !Ref Deployment
      ApiId: !Ref MyWebSocketApi
  PortfolioBlocksPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - SocketLoggingFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketLoggingFunction
      Principal: apigateway.amazonaws.com
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # HelloWorldApi:
  #   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    # Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  SocketLoggingFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt SocketLoggingFunction.Arn
  SocketLoggingFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt SocketLoggingFunctionRole.Arn
  NotificationFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt NotificationFunction.Arn
  NotificationFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt NotificationFunctionRole.Arn
