AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900

Resources:
  ConnectFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build
      Handler: connectLambda.handler
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TriviaTable }
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref TriviaTable
  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - ConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com
  ConnectLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: On Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  DisconnectFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build
      Handler: disconnectLambda.handler
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TriviaTable }
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref TriviaTable
  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - DisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com
  DisconnectLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: On Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  SocketLoggingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build
      Handler: loggingLambda.handler
      Runtime: nodejs10.x
      Policies:
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TriviaTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
  SocketLoggingPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - SocketLoggingFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SocketLoggingFunction
      Principal: apigateway.amazonaws.com
  SocketLoggingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: Test Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketLoggingFunction.Arn}/invocations

  DefaultFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build
      Handler: defaultLambda.handler
      Runtime: nodejs10.x
      Policies:
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
  DefaultPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - DefaultFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefaultFunction
      Principal: apigateway.amazonaws.com
  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyWebSocketApi
      Description: Test Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations

  NotificationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build/notificationLambda
      Handler: notificationLambda.handler
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TriviaTable }
        - AWSLambdaExecute # Managed Policy
        - Version: "2012-10-17" # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - "arn:aws:execute-api:*:*:**/@connections/*"
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref TriviaTable
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TriviaTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON

  TriviaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "kid"
          AttributeType: "S"
        - AttributeName: "sk"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: kid
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      Tags:
        - Key: "useage"
          Value: "trivia"

  MyWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "$connect"
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectLambdaIntegration
  # ConnectRouteResponse: # TODO: not working
  #   Type: 'AWS::ApiGatewayV2::RouteResponse'
  #   Properties:
  #     RouteId: !Ref ConnectRoute
  #     ApiId: !Ref MyWebSocketApi
  #     RouteResponseKey: $default
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "$disconnect"
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectLambdaIntegration
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyWebSocketApi
      RouteKey: "$default"
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DefaultIntegration
  # DefaultRouteResponse: # TODO> not working
  #   Type: 'AWS::ApiGatewayV2::RouteResponse'
  #   Properties:
  #     RouteId: !Ref DefaultRoute
  #     ApiId: !Ref MyWebSocketApi
  #     RouteResponseKey: $default

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - DefaultRoute
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref MyWebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: v2
      Description: Version 1 'stage'
      DeploymentId: !Ref Deployment
      ApiId: !Ref MyWebSocketApi

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # HelloWorldApi:
  #   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  # Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  SocketLoggingFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt SocketLoggingFunction.Arn
  SocketLoggingFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt SocketLoggingFunctionRole.Arn
  ConnectFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt ConnectFunction.Arn
  ConnectFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt ConnectFunctionRole.Arn
  NotificationFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt NotificationFunction.Arn
  NotificationFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt NotificationFunctionRole.Arn
