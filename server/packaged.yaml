AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "sam-app

  Sample SAM Template for sam-app

  "
Globals:
  Function:
    Timeout: 900
Resources:
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/940548e0ac7a088043a34c272e16e338
      Handler: connectLambda.handler
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TriviaTable
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
      Environment:
        Variables:
          DYNAMO_TABLE:
            Ref: TriviaTable
  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - ConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ConnectFunction
      Principal: apigateway.amazonaws.com
  ConnectLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      Description: On Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations
  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/c825d4c0835e884f6298138360dae6a9
      Handler: disconnectLambda.handler
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TriviaTable
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
      Environment:
        Variables:
          DYNAMO_TABLE:
            Ref: TriviaTable
  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - DisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DisconnectFunction
      Principal: apigateway.amazonaws.com
  DisconnectLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      Description: On Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations
  SocketLoggingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/7a5b39ccfb783236ff30ffad69ef1a6c
      Handler: loggingLambda.handler
      Runtime: nodejs10.x
      Policies:
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
                - TriviaTable
                - StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
  SocketLoggingPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - SocketLoggingFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SocketLoggingFunction
      Principal: apigateway.amazonaws.com
  SocketLoggingIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      Description: Test Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketLoggingFunction.Arn}/invocations
  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/9f1c261756326292629f4a230392a13c
      Handler: defaultLambda.handler
      Runtime: nodejs10.x
      Policies:
        - AWSLambdaFullAccess
        - CloudWatchLogsFullAccess
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonAPIGatewayAdministrator
  DefaultPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyWebSocketApi
      - DefaultFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DefaultFunction
      Principal: apigateway.amazonaws.com
  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      Description: Test Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/917b4ee4dc28137acfc5ea8da8bdbf94
      Handler: notificationLambda.handler
      Runtime: nodejs10.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Ref: TriviaTable
        - AWSLambdaExecute
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource:
                - arn:aws:execute-api:*:*:**/@connections/*
      Environment:
        Variables:
          DYNAMO_TABLE:
            Ref: TriviaTable
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
                - TriviaTable
                - StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
  TriviaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: kid
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: kid
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      Tags:
        - Key: useage
          Value: trivia
  MyWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: ConnectLambdaIntegration
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      RouteKey: $disconnect
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: DisconnectLambdaIntegration
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target:
        Fn::Join:
          - /
          - - integrations
            - Ref: DefaultIntegration
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - DefaultRoute
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId:
        Ref: MyWebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: v2
      Description: Version 1 'stage'
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: MyWebSocketApi
Outputs:
  SocketLoggingFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
        - SocketLoggingFunction
        - Arn
  SocketLoggingFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
        - SocketLoggingFunctionRole
        - Arn
  ConnectFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
        - ConnectFunction
        - Arn
  ConnectFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
        - ConnectFunctionRole
        - Arn
  NotificationFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
        - NotificationFunction
        - Arn
  NotificationFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
        - NotificationFunctionRole
        - Arn
