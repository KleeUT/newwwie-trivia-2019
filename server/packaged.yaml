AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'sam-app

  Sample SAM Template for sam-app

  '
Globals:
  Function:
    Timeout: 900
Resources:
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/26550a4f51c64a2c2599e5418133f782
      Handler: connectLambda.handler
      Runtime: nodejs10.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TriviaTable
      - AWSLambdaFullAccess
      - CloudWatchLogsFullAccess
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      Environment:
        Variables:
          DYNAMO_TABLE:
            Ref: TriviaTable
  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - MyWebSocketApi
    - ConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ConnectFunction
      Principal: apigateway.amazonaws.com
  ConnectLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      Description: On Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations
  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/5a84e48f2d497eeaf7233c6ff14e93d4
      Handler: disconnectLambda.handler
      Runtime: nodejs10.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TriviaTable
      - AWSLambdaFullAccess
      - CloudWatchLogsFullAccess
      - AmazonAPIGatewayInvokeFullAccess
      - AmazonAPIGatewayAdministrator
      Environment:
        Variables:
          DYNAMO_TABLE:
            Ref: TriviaTable
  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - MyWebSocketApi
    - DisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DisconnectFunction
      Principal: apigateway.amazonaws.com
  DisconnectLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      Description: On Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kleeut-lambda/f201e7c12447506138c359f7ec1c91de
      Handler: notificationLambda/notificationLambda.handler
      Runtime: nodejs10.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: TriviaTable
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - arn:aws:execute-api:*:*:**/@connections/*
      Environment:
        Variables:
          DYNAMO_TABLE:
            Ref: TriviaTable
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - TriviaTable
              - StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
  TriviaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: kid
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: kid
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      Tags:
      - Key: useage
        Value: trivia
  MyWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ConnectLambdaIntegration
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyWebSocketApi
      RouteKey: $disconnect
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisconnectLambdaIntegration
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId:
        Ref: MyWebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: v2
      Description: Version 1 'stage'
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: MyWebSocketApi
Outputs:
  ConnectFunction:
    Description: Web Socket connect functino
    Value:
      Fn::GetAtt:
      - ConnectFunction
      - Arn
  DisconnectFunction:
    Description: Web Socket connect functino
    Value:
      Fn::GetAtt:
      - DisconnectFunction
      - Arn
  NotificationFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
      - NotificationFunction
      - Arn
